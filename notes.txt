Writing Django Tests

    Types of Tests

    1. Unit Tests - Verify functional behaviour of individual componnts, often to class and funtional level
    2. Regression tests - Tests that reproduce historic bugs. Each test initially run to verify that the bug has been fixed, and then re-run to verify that the bug has not been re-introduced following later changes to the code.
    3. Integration tests - Verify how groupings of components work when used together. Integration tests are aware of the required interractions between components, but not necessarily of the internal operations
                           of each component. They may cover simple groupings of components through to the whole website.
    

    What does Django Provide for testing?

    Django provides a test framework with  a small hierachy of classes that build on the python standard unittest library.
    You should test all aspects of youer code, but nnot any libraries or functionality provided as part of python or django.

Core Concepts and Best Practices when writing django tests
    a. Test Case Classes: The TestCase class is a base class for writing tests. It inherits from Python's `unittest.TestCase` and provides additional functionality specific to Django
    b. Test Methods: Test Methods within a test case class are defined with names starting with `test_`. Each test method should focus on testing a specific aspect of your code.
    c. Test Fixtures: These are pre-defined data or conditions that are set up before running a test and cleaned up afterward. Fixtures are provided through the `setup()` and `tearDown()` methods.
    d. Assertions: 